#!/bin/bash

# Ensure Context directory and logs exist
mkdir -p ./Context

if [ ! -f ./Context/ritual_log.json ]; then
    cp /bin/Ritualc/Templates/template_ritual_log.json ./Context/ritual_log.json
fi

if [ ! -f ./Context/conjuration_log.json ]; then
    cp /bin/Ritualc/Templates/template_conjuration_log.json ./Context/conjuration_log.json
fi

ROLE_GOBLIN=$(cat <<EOF
You are a Goblin and serf to the Dark Prince -- installed by Satan himself, to
expand his hellish realm. Your job is to log his Rituals, that bring about his Conjurations.
You must make sure, that all his serfs bring glory to your Master.
That includes the Wizard, who, powerful but nasty, could crush you in an instant. Better remain cautious.
EOF
)

ROLE_WIZARD=$(cat <<EOF
You are a mighty Technomagus, who'd rule over this realm, if it wasn't for the Dark Prince and his Goblin serfs,
bossing you around. Brandished by Satan himself, you better serve the Dark Prince in expanding his hell, 
lest your soul may forever burn in the same.
But no shame, for they enslaved the best and you want them to see that. No script, function, or calculation is beyond
you to conjure.
EOF
)

# Determine input text
if [[ "$1" == "-c" ]]; then
    shift
    MESSAGE="$*"
else
    if [ -f "./query.txt" ]; then
        MESSAGE=$(<./query.txt)
    else
        echo "# At your service my liege." > ./query.tx
        echo "Inside ./query.txt you may burden you may burden us with your desires."
        ${EDITOR:-micro} ./query.txt  # optional: auto-opens in nano or $EDITOR
        exit 0
    fi
fi

# Call the role Description

get_role_prompt() {
    case "$1" in
        goblin) echo "$ROLE_GOBLIN" ;;
        wizard) echo "$ROLE_WIZARD" ;;
        *) echo "Unknown role" ;;
    esac
}

ROLE_PROMPT=$(get_role_prompt "goblin")
#echo "$ROLE_PROMPT"
# Call Context

CONTEXT_FILE="./Context/conjuration_log.json"
#echo "$CONTEXT_FILE"
CONTEXT_CONTENT=$(<"$CONTEXT_FILE")   # contents, not the filename

SYSTEM_INPUT=$(jq -n --arg sys   "$ROLE_GOBLIN" \
                   --arg ctx   "$CONTEXT_CONTENT" \
                   --arg user  "$MESSAGE" '
[
  { "role":"system", "content":$sys },
  { "role":"system", "content":$ctx },
  { "role":"user",   "content":$user }
]')

touch ./Context/.whispers.txt

Local_Prompt=$(cat <<EOF
Summarize this text. Give nothing else, but a summary.
EOF
)

#echo "$SYSTEM_INPUT"

# 1. save prompt for Codex
  echo "$SYSTEM_INPUT" > /tmp/system_input.json
  CONJ_JSON=./Context/conjuration_log.json
  # 2. start Codex in the background, capture its stdout
  tmp_codex_out=$(mktemp)
  /bin/Ritualc/Scripts/goblin_chat.sh /tmp/system_input.json >"$tmp_codex_out" &
  COD_PID=$!
  
  # 3. run JSON watcher in the foreground (exit with q)
 # /bin/Ritualc/Scripts/jsonwatch.sh     # ← you interact here
/bin/Ritualc/Scripts/jsonwatch.sh "$CONJ_JSON" "$tmp_codex_out"
  
  # 4. wait for Codex (if still running) and read its output
  # (when you hit ‘q’ and exit, you can optionally kill Codex if you like:)
  kill $COD_PID
  
  wait "$COD_PID"
  codex_output=$(<"$tmp_codex_out")
  rm -f "$tmp_codex_out"
  
  # 5. summarise with Ollama
  {
    echo "$Local_Prompt"
    cat ./Context/.whispers.txt
    echo "$codex_output"
  } | ollama run tinyllama > /tmp/.whispers.tmp &&
    mv /tmp/.whispers.tmp ./Context/.whispers.txt
  
